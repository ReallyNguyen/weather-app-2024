import Head from "next/head";
import { GetStaticProps } from "next";
import Image from "next/image";
import axios from "axios";
import { useState } from "react";
import styles from "@/styles/Home.module.css";

export default function Home() {
  var apiKey = "9d4eaad36311f73442d6fecf3536dcf8"
  
  const [currentData, setCurrentData] = useState<ICurrentProps | null>(null)
  const [fiveDayData, setFiveDayData] = useState<IFiveDaysProps | null>(null)
  const [search, setSearch] = useState<string>("")

  const searchPressed = async () => {
    try {
      const searchUrl = `https://api.openweathermap.org/data/2.5/weather?q=${search}&appid=${apiKey}`;
      const fiveDaySearchUrl = `https://api.openweathermap.org/data/2.5/forecast?q=${search}&appid=${apiKey}`;

      const currentResponse = await axios.get(searchUrl);
      setCurrentData(currentResponse.data);

      const fiveDayResponse = await axios.get(fiveDaySearchUrl);
      setFiveDayData(fiveDayResponse.data);
    } catch (error) {
      console.error(error);
    }
  };

  const roundUp = (number: number) => {
    return parseFloat(number.toFixed(1));
  };
  

  const toCelsius = (celsius: number) => {
    return celsius - 273.15;
  };
  
  const date = (timestampOrString: number | string) => {
    const dateObj = typeof timestampOrString === 'number' ? new Date(timestampOrString * 1000) : new Date(timestampOrString);
    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
    const monthName = months[dateObj.getMonth()];
    const day = dateObj.getDate();
    const year = dateObj.getFullYear();
    return `${monthName} ${day}, ${year}`;
  };

  const getWeatherImage = (weatherMain: string) => {
    switch (weatherMain) {
      case "Clear":
        return "/icon/clear.svg";
      case "Clouds":
        return "/icon/cloud.svg";
      case "Rain":
        return "/icon/rain.svg";
      case "Snow":
        return "/icon/snow.svg";
      case "Sun":
        return "/icon/sun.svg"
      default:
        return "/icon/default.png";
    }
  };
  

  return (
    <>
      <Head>
        <title>Weather</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/icon/sun.svg" />
      </Head>
      <main className={styles.main}>
        <div>
          <header className={styles.header}>
            <Image className={styles.image} src="/icon/sun.svg" width={80} height={80} alt="icon" />
            <div className={styles.inputContainer}>
              <input 
                className={styles.input}
                type="text"
                placeholder="Enter Location"
                value={search}
                onChange={(e) => setSearch(e.target.value)}
              />
              <button className={styles.button} onClick={searchPressed}>Search</button>
            </div>
          </header>
        </div>
        <div>
          {
            currentData ? 
            <div className={styles.weatherInfo}>
              {currentData && (
                <div className={styles.currentData}>
                  <div>
                    <h1 className={styles.h1}>{roundUp(toCelsius(currentData.main.temp))}°C</h1>
                    <h3 className={styles.h3}>{currentData.name}</h3>
                    <p>{date(currentData.dt)}</p>
                  </div>
                  <div>
                    <Image
                      src={getWeatherImage(currentData.weather[0].main)}
                      alt={currentData.weather[0].main}
                      className={styles.weatherImage}
                      width={200}
                      height={200}
                    />
                    <p>Weather: {currentData.weather[0].main}</p>
                    <p>Wind speed: {currentData.wind.speed}</p>
                  </div>
                </div>
              )}
              {fiveDayData && (
                <div className={styles.fiveDayData}>
                  {[0, 8, 16, 24, 32].map(index => (
                    <div key={index} className={styles.day}>
                      <div className={styles.left}>
                        <h1>{roundUp(toCelsius(fiveDayData.list[index].main.temp))}°C</h1>
                        <p>{date(fiveDayData.list[index].dt_txt)}</p>
                        <p>Weather: {fiveDayData.list[index].weather[0].main}</p>
                        <p>Wind speed: {fiveDayData.list[index].wind.speed}</p>                       
                      </div>
                      <Image
                      src={getWeatherImage(fiveDayData.list[index].weather[0].main)}
                      alt={fiveDayData.list[index].weather[0].main}
                      className={styles.weatherImage}
                      width={200}
                      height={200}
                    />
                    </div>
                    
                  ))}
                </div>
              )}
          </div> : 
            <div className={styles.noSearch}>
              <h1>Search up location to see weather</h1>
            </div>
          }
        </div>
        <footer className={styles.footer}>
          Created by Jordan
        </footer>
      </main>
    </>
  );
}
